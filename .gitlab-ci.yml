# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages: # List of stages for jobs, and their order of execution
  - build
  - deploy
  - setup
  - test
  - cleanup

build-job: # This job runs in the build stage, which runs first.
  stage: build
  # rules:
  #   - when: manual
  script:
    - cd ui
    - docker build -t cs590-final-ui .
    - echo "Docker build ui."
    - echo "Docker build ui complete."
    - cd ..
    - cd server
    - docker build -t cs590-final-server .
    - echo "Docker build server."
    - echo "Docker build server complete."

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  # environment: production
  # rules:
  #   - when: manual
  script:
    - kubectl create -f k8s/
    - sleep 5
    - echo "Deploying application..."
    - echo "Application successfully deployed."

mongo_setup:
  stage: setup
  script:
    - echo "Starting port-forward..."
    - kubectl port-forward service/db 27017:27017 & 
    - MONGO_PORT_FORWARD_PID=$!
    - echo "$MONGO_PORT_FORWARD_PID"
    - sleep 5  
    - echo "Running setup script..."
    - cd server && npm run setup
    - echo "Setup complete, killing port-forward..."
    - kill $MONGO_PORT_FORWARD_PID
    - wait $MONGO_PORT_FORWARD_PID 
    - echo "Port-forward stopped."


cleanup:
  stage: cleanup
  script:
    - kubectl delete -f k8s/
  # rules:
  #   - when: manual